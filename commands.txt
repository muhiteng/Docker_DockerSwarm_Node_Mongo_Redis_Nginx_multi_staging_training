npm init -y
npm i express
npm i mongoose
npm i redis
npm i --save-dev nodemon
// docker commands
docker build -t express_node_app .
docker image ls
docker image rmi express_node_app
// run docker with name , deattach mode to run in background , with port 
docker run  --name  express_node_app_container -d -p 4000:4000 express_node_app
docker container ps
docker container stop express_node_app_container
// remove container need stop first
docker container rm express_node_app_container
// remove container by force  flag
docker container rm express_node_app_container -f

// open  with interactive terminal flag
docker exec -it express_node_app_container bash
// open working directory  inside docker container terminal 
pwd
// all files 
ls
// print all env variables
printenv
// to show logs in container 
docker logs express_node_app_container
//to show logs in container and still opeen use -f (follow)flag
docker logs express_node_app_container -f 
//===========================================
//=========== volumes ===============
// ======== 1 . bind mount volume ======================
// to sync changes use -v absoulute_path:/app flag in run 
// run command not resolve relative path , so we must use relative path
// absoulute_path is the path to main directory
// this way is twobind (two way binding )(change in container will change code )(bind mount volume type)
docker run  --name  express_node_app_container -d -v absoulute_path:/app -p 4000:4000 express_node_app
//or using print working directory(pwd)
docker run  --name  express_node_app_container -d -v ${pwd}:/app -p 4000:4000 express_node_app
//this way is onebind (one way binding )(change in container will not change code )(bind mount volume type)(ro  read only)
docker run  --name  express_node_app_container -d -v absoulute_path:/app:ro -p 4000:4000 express_node_app
//or using print working directory(pwd)
docker run  --name  express_node_app_container -d -v ${pwd}:/app:ro -p 4000:4000 express_node_app
// ======== 2 . anonymous volume ======================
// to not change directory /app/node_modules
docker run  --name  express_node_app_container -d -v ${pwd}:/app:ro -v /app/node_modules -p 4000:4000 express_node_app

//********** best solution ***********
//********* bind mount one way from folder src only
docker run  --name  express_node_app_container -d -v ${pwd}/src:/app/src:ro  -p 4000:4000 express_node_app
// run docker compose
docker-compose up
docker-compose up -de
// stop docker compose
docker-compose down
// run specific docker-compose file (use -f flag)
docker-compose -f docker-compose.dev.yml up -d
// stop specific docker-compose file (use -f flag)
docker-compose -f docker-compose.dev.yml down
// stop specific docker-compose file (use -f flag) and its volumes
docker-compose -f docker-compose.dev.yml down -v
// run 2 doker-compose files, here docker-compose.yml  has a common settings
docker-compose -f docker-compose.yml  -f docker-compose.dev.yml up -d
//if want to rebuild docker file important for dev
docker-compose -f docker-compose.yml  -f docker-compose.dev.yml up -d --build
// if we want to run more than one container same service
docker-compose -f docker-compose.yml  -f docker-compose.dev.yml up -d --build --scale node-app=3
// to show ip and other details about container 
docker inspect express_node_app_container
docker inspect express_node_app_mongo
// show all networks
docker network ls
// to go inside mongdb container 
docker exec -it express_node_app_mongo bash
// to connect to db inside it (in old version use mongo -u user_name  -p password) but in new version >6 use mongosh
mongosh -u user_name  -p password
show dbs; 
use testDB; // create new db
db.books.insert({title:"book1"}) 
// show all volumes 
docker volume ls
// remove volume
docker volume rm volume_name
// remove not used volumes
docker volume prune
